version: '3.8'

services:
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: github-oauth-postgres-dev
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-github_oauth_app}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: github-oauth-backend-dev
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ./backend:/app
      - backend_cache:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: air -c .air.toml

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: github-oauth-frontend-dev
    environment:
      NEXT_PUBLIC_BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    depends_on:
      - backend
    networks:
      - app-network
    command: pnpm dev

volumes:
  postgres_data_dev:
  backend_cache:
  frontend_node_modules:
  frontend_next:

networks:
  app-network:
    driver: bridge
